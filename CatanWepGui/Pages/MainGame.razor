@page "/MainGame"
@using System.Runtime.CompilerServices
@using System.Text.Json
@using Catan.MainGame
@using Catan.MainGame.Cards
@using Catan.MainGame.Figures
@using Catan.MainGame.MainGameloop
@inject IJSRuntime Js

<main>
    @if (CurrentPhaseId != 1) {
        <div id="activePlayer" style="border: 2px solid @ColorRotator[CurrentColorId]; transition: border-color 0.5s ease-in-out;">
            <h4>Players @(CurrentColorId + 1)</h4>
            <a>Name : @ActivePlayers[CurrentColorId].Name</a><br/>
            <a>Color : @ActivePlayers[CurrentColorId].Color</a>
        </div>
    }
    else {
        <div id="activePlayer" style="border: 2px solid @ColorRotator[CurrentColorId]; transition: border-color 0.5s ease-in-out;">
            <h4>Dice Roll</h4>
            @{ Dice(); }
            <a>@DiceRoll</a>
        </div>
    }
    <article>
        <section>
            <div class="non-tile"></div>
            <div style="background-image: url(@TileRandomizer.Tiles[0].ImageUrl)" class="tile"><a>@TileRandomizer.Id[0]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[1].ImageUrl)" class="tile"><a>@TileRandomizer.Id[1]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[2].ImageUrl)" class="tile"><a>@TileRandomizer.Id[2]</a></div>
            <div class="non-tile"></div>
            <!--row end-->
            <div style="background-image: url(@TileRandomizer.Tiles[3].ImageUrl)" class="tile"><a>@TileRandomizer.Id[3]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[4].ImageUrl)" class="tile"><a>@TileRandomizer.Id[4]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[5].ImageUrl)" class="tile"><a>@TileRandomizer.Id[5]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[6].ImageUrl)" class="tile"><a>@TileRandomizer.Id[6]</a></div>
            <!--row end-->
            <div style="background-image: url(@TileRandomizer.Tiles[7].ImageUrl)" class="tile"><a>@TileRandomizer.Id[7]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[8].ImageUrl)" class="tile"><a>@TileRandomizer.Id[8]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[9].ImageUrl)" class="tile"></div>
            <div style="background-image: url(@TileRandomizer.Tiles[10].ImageUrl)" class="tile"><a>@TileRandomizer.Id[9]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[11].ImageUrl)" class="tile"><a>@TileRandomizer.Id[10]</a></div>
            <!--row end-->
            <div style="background-image: url(@TileRandomizer.Tiles[12].ImageUrl)" class="tile"><a>@TileRandomizer.Id[11]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[13].ImageUrl)" class="tile"><a>@TileRandomizer.Id[12]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[14].ImageUrl)" class="tile"><a>@TileRandomizer.Id[13]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[15].ImageUrl)" class="tile"><a>@TileRandomizer.Id[14]</a></div>
            <!--row end-->
            <div class="non-tile"></div>
            <div style="background-image: url(@TileRandomizer.Tiles[16].ImageUrl)" class="tile"><a>@TileRandomizer.Id[15]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[17].ImageUrl)" class="tile"><a>@TileRandomizer.Id[16]</a></div>
            <div style="background-image: url(@TileRandomizer.Tiles[18].ImageUrl)" class="tile"><a>@TileRandomizer.Id[17]</a></div>
            <div class="non-tile"></div>
            <!--row end-->

            <section id="top_grid">
                <div class="intersec active" id="top_grid_1" style="visibility: hidden; top: -569.5px; left: 271.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_1"))"></div>
                <div class="intersec active" id="top_grid_2" style="visibility: hidden; top: -569.5px; left: 399px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_2"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_3" style="visibility: hidden; top: -488.2px; left: 112.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_3"))"></div>
                <div class="intersec active" id="top_grid_4" style="visibility: hidden; top: -488.2px; left: 241.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_4"))"></div>
                <div class="intersec active" id="top_grid_5" style="visibility: hidden; top: -488.2px; left: 369px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_5"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_6" style="visibility: hidden; top: -488.2px; left: 496.8px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_6"))"></div>
                <div class="intersec active" id="top_grid_7" style="visibility: hidden; top: -448.8px; left: 142px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_7"))"></div>
                <div class="intersec active" id="top_grid_8" style="visibility: hidden; top: -448.8px; left: 270px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_8"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_9" style="visibility: hidden; top: -448.8px; left: 398.1px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_9"))"></div>
                <div class="intersec active" id="top_grid_10" style="visibility: hidden; top: -367.9px; left: -25.8px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_10"))"></div>
                <div class="intersec active" id="top_grid_11" style="visibility: hidden; top: -367.9px; left: 101.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_11"))"></div>
                <div class="intersec active" id="top_grid_12" style="visibility: hidden; top: -367.9px; left: 229.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_12"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_13" style="visibility: hidden; top: -367.9px; left: 358px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_13"))"></div>
                <div class="intersec active" id="top_grid_14" style="visibility: hidden; top: -367.9px; left: 486px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_14"))"></div>
                <div class="intersec active" id="top_grid_15" style="visibility: hidden; top: -328.5px; left: -7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_15"))"></div>
                <div class="intersec active" id="top_grid_16" style="visibility: hidden; top: -328.5px; left: 121px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_16"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_17" style="visibility: hidden; top: -328.5px; left: 249px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_17"))"></div>
                <div class="intersec active" id="top_grid_18" style="visibility: hidden; top: -328.5px; left: 377px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_18"))"></div>
                <div class="intersec active" id="top_grid_19" style="visibility: hidden; top: -247px; left: -47px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_19"))"></div>
                <div class="intersec active" id="top_grid_20" style="visibility: hidden; top: -247px; left: 81px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_20"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_21" style="visibility: hidden; top: -247px; left: 209px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_21"))"></div>
                <div class="intersec active" id="top_grid_22" style="visibility: hidden; top: -247px; left: 337px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_22"))"></div>
                <div class="intersec active" id="top_grid_23" style="visibility: hidden; top: -207.8px; left: -155.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_23"))"></div>
                <!-- row end -->
                <div class="intersec active" id="top_grid_24" style="visibility: hidden; top: -207.8px; left: -27.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_24"))"></div>
                <div class="intersec active" id="top_grid_25" style="visibility: hidden; top: -207.8px; left: 100px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_25"))"></div>
                <div class="intersec active" id="top_grid_26" style="visibility: hidden; top: -207.8px; left: 228px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_26"))"></div>
                <div class="intersec active" id="top_grid_27" style="visibility: hidden; top: -207.8px; left: 356.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_27"))"></div>
                <div class="intersec active" id="top_grid_28" style="visibility: hidden; top: -126.5px; left: -67.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_28"))"></div>
                <div class="intersec active" id="top_grid_29" style="visibility: hidden; top: -126.5px; left: 60px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_29"))"></div>
                <div class="intersec active" id="top_grid_30" style="visibility: hidden; top: -126.5px; left: 188px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_30"))"></div>
                <div class="intersec active" id="top_grid_31" style="visibility: hidden; top: -87.3px; left: -166.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_31"))"></div>
                <div class="intersec active" id="top_grid_32" style="visibility: hidden; top: -87.3px; left: -38.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_32"))"></div>
                <div class="intersec active" id="top_grid_33" style="visibility: hidden; top: -87.3px; left: 89px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_33"))"></div>
                <div class="intersec active" id="top_grid_34" style="visibility: hidden; top: -87.3px; left: 216.8px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_34"))"></div>
                <div class="intersec active" id="top_grid_35" style="visibility: hidden; top: -5.8px; left: -69px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_35"))"></div>
                <div class="intersec active" id="top_grid_36" style="visibility: hidden; top: -5.8px; left: 59px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => Place("top_grid_36"))"></div>
                <div class="stopper        " id="top_grid_37" style="visibility: hidden; top: 0px; left: 0px; background-color: rgba(0,255,0,0);"></div>
            </section>

            <section id="top_grid_lines">

                <div class="bord active" id="top_grid_line_0" style="visibility: hidden; top: -577px; left: 272.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_0"))"></div>
                <div class="bord active" id="top_grid_line_1" style="visibility: hidden; top: -577px; left: 403.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_1"))"></div>
                <div class="bord active" id="top_grid_line_2" style="visibility: hidden; top: -518.4px; left: 155.3px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_2"))"></div>
                <div class="bord active" id="top_grid_line_3" style="visibility: hidden; top: -518.4px; left: 216.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_3"))"></div>
                <div class="bord active" id="top_grid_line_4" style="visibility: hidden; top: -518.4px; left: 279.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_4"))"></div>
                <div class="bord active" id="top_grid_line_5" style="visibility: hidden; top: -518.4px; left: 340.3px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_5"))"></div>
                <div class="bord active" id="top_grid_line_6" style="visibility: hidden; top: -518.4px; left: 403.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_6"))"></div>
                <div class="bord active" id="top_grid_line_7" style="visibility: hidden; top: -518.4px; left: 464px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_7"))"></div>
                <div class="bord active" id="top_grid_line_8" style="visibility: hidden; top: -459.8px; left: 147.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_8"))"></div>
                <div class="bord active" id="top_grid_line_9" style="visibility: hidden; top: -459.8px; left: 278.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_9"))"></div>
                <div class="bord active" id="top_grid_line_10" style="visibility: hidden; top: -459.8px; left: 409.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_10"))"></div>
                <div class="bord active" id="top_grid_line_11" style="visibility: hidden; top: -398.2px; left: 22.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_11"))"></div>
                <div class="bord active" id="top_grid_line_12" style="visibility: hidden; top: -398.2px; left: 85.3px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_12"))"></div>
                <div class="bord active" id="top_grid_line_13" style="visibility: hidden; top: -398.2px; left: 146.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_13"))"></div>
                <div class="bord active" id="top_grid_line_14" style="visibility: hidden; top: -398.2px; left: 209.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_14"))"></div>
                <div class="bord active" id="top_grid_line_15" style="visibility: hidden; top: -398.2px; left: 270.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_15"))"></div>
                <div class="bord active" id="top_grid_line_16" style="visibility: hidden; top: -398.2px; left: 333px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_16"))"></div>
                <div class="bord active" id="top_grid_line_17" style="visibility: hidden; top: -398.2px; left: 394.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_17"))"></div>
                <div class="bord active" id="top_grid_line_18" style="visibility: hidden; top: -398.2px; left: 457px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_18"))"></div>
                <div class="bord active" id="top_grid_line_19" style="visibility: hidden; top: -336.5px; left: 1.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_19"))"></div>
                <div class="bord active" id="top_grid_line_20" style="visibility: hidden; top: -336.5px; left: 132.25px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_20"))"></div>
                <div class="bord active" id="top_grid_line_21" style="visibility: hidden; top: -336.5px; left: 263.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_21"))"></div>
                <div class="bord active" id="top_grid_line_22" style="visibility: hidden; top: -336.5px; left: 394.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_22"))"></div>
                <div class="bord active" id="top_grid_line_23" style="visibility: hidden; top: -278px; left: -61px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_23"))"></div>
                <div class="bord active" id="top_grid_line_24" style="visibility: hidden; top: -278px; left: 0px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_24"))"></div>
                <div class="bord active" id="top_grid_line_25" style="visibility: hidden; top: -278px; left: 63.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_25"))"></div>
                <div class="bord active" id="top_grid_line_26" style="visibility: hidden; top: -278px; left: 123.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_26"))"></div>
                <div class="bord active" id="top_grid_line_27" style="visibility: hidden; top: -278px; left: 187.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_27"))"></div>
                <div class="bord active" id="top_grid_line_28" style="visibility: hidden; top: -278px; left: 248.4px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_28"))"></div>
                <div class="bord active" id="top_grid_line_29" style="visibility: hidden; top: -278px; left: 311.3px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_29"))"></div>
                <div class="bord active" id="top_grid_line_30" style="visibility: hidden; top: -278px; left: 372px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_30"))"></div>
                <div class="bord active" id="top_grid_line_31" style="visibility: hidden; top: -216.4px; left: -13.7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_31"))"></div>
                <div class="bord active" id="top_grid_line_32" style="visibility: hidden; top: -216.4px; left: 117.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_32"))"></div>
                <div class="bord active" id="top_grid_line_33" style="visibility: hidden; top: -216.4px; left: 248.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_33"))"></div>
                <div class="bord active" id="top_grid_line_34" style="visibility: hidden; top: -157px; left: -68px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_34"))"></div>
                <div class="bord active" id="top_grid_line_35" style="visibility: hidden; top: -157px; left: -8px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_35"))"></div>
                <div class="bord active" id="top_grid_line_36" style="visibility: hidden; top: -157px; left: 55.9px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_36"))"></div>
                <div class="bord active" id="top_grid_line_37" style="visibility: hidden; top: -157px; left: 116.2px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_37"))"></div>
                <div class="bord active" id="top_grid_line_38" style="visibility: hidden; top: -157px; left: 180px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_38"))"></div>
                <div class="bord active" id="top_grid_line_39" style="visibility: hidden; top: -157px; left: 240px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_39"))"></div>
                <div class="bord active" id="top_grid_line_40" style="visibility: hidden; top: -96px; left: -7px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_40"))"></div>
                <div class="bord active" id="top_grid_line_41" style="visibility: hidden; top: -96px; left: 123.5px; background-color: rgba(0, 160, 255, 0.5);" @onclick="@(() => PlaceStreet("top_grid_line_41"))"></div>
            </section>


        </section>
    </article>
    <aside>
        <nav>
            <button id="City" class="building butn" @onclick="@(() => Build(new City(),".intersec"))">Stadt</button>
            <button id="Settlement" class="building butn" @onclick="@(() => Build(new Settlement(),".intersec"))">Siedlung</button>
            <button id="Road" class="building butn" @onclick="@(() => Build(new Road(),".bord"))">Straße</button>
            <button id="Raider" class="activity butn">Räuber</button>
        </nav>

        <div id="switchable">
            <div>
                <div id="wood" class="ressource">
                    @foreach (var Card in ActivePlayers[CurrentColorId].RessourceCards.Where(r => r.Id == ECards.Wood)) {
                        <article class="ressourceCard">
                            <img src="/img/log.svg" alt="kein wut">
                            <h3>@Card.Id</h3>
                        </article>
                    }
                </div>
                <div id="clay" class="ressource">
                    @foreach (var Card in ActivePlayers[CurrentColorId].RessourceCards.Where(r => r.Id == ECards.Clay)) {
                        <article class="ressourceCard">
                            <img src="/img/clay.webp" alt="kein wut">
                            <h3>@Card.Id</h3>
                        </article>
                    }
                </div>
                <div id="sheep" class="ressource">
                    @foreach (var Card in ActivePlayers[CurrentColorId].RessourceCards.Where(r => r.Id == ECards.Sheep)) {
                        <article class="ressourceCard">
                            <img src="/img/sheep.svg" alt="kein wut">
                            <h3>@Card.Id</h3>
                        </article>
                    }
                </div>
                <div id="wheat" class="ressource">
                    @foreach (var Card in ActivePlayers[CurrentColorId].RessourceCards.Where(r => r.Id == ECards.Wheat)) {
                        <article class="ressourceCard">
                            <img src="/img/wheat.svg" alt="kein wut">
                            <h3>@Card.Id</h3>
                        </article>
                    }
                </div>
                <div id="ore" class="ressource">
                    @foreach (var Card in ActivePlayers[CurrentColorId].RessourceCards.Where(r => r.Id == ECards.Ore)) {
                        <article class="ressourceCard">
                            <img src="/img/ore.png" alt="kein wut">
                            <h3>@Card.Id</h3>
                        </article>
                    }
                </div>
            </div>

            <section>
                <div id="specialCardCorner">

                </div>
            </section>
        </div>
        @if (CurrentPhaseId != 0) { // muss auf 1 ändern
            if (CurrentColorId + 1 < ActivePlayers.Count) {
                ButtonText = "Nächster Spieler";
            } else {
                ButtonText = "Würfel würfeln";
            }
             <div id="nextPlayerButton"><button @onclick="() => ChangeBorderColor()">@ButtonText </button></div>
        }
        else {
            <div id="nextPlayerButton"><button @onclick="() => Ertragerwirtschafter()">Ertrag erwirtschaften</button></div>
        }
    </aside>
</main>

<style>
.intersec{
    background-color: rgba(0, 160, 255, 0.5);
    transition: 0.05s;
}
.intersec:active{
    transition: 0.05s !important;
    background-color: rgba(255, 0, 0, 0.9);
}
.intersec:hover{
    transition: 0.4s !important;
    background-color: rgba(0, 160, 255, 0.9);
}
</style>

@code {
    // Player 1
    [SupplyParameterFromQuery]
    public string? Username1 { get; set; }
    [SupplyParameterFromQuery]
    public string? Color1 { get; set; }    
    [SupplyParameterFromQuery]
    public bool Active1 { get; set; }
    // Player 2
    [SupplyParameterFromQuery]
    public string? Username2 { get; set; }
    [SupplyParameterFromQuery]
    public string? Color2 { get; set; }    
    [SupplyParameterFromQuery]
    public bool Active2 { get; set; }
    // Player 3
    [SupplyParameterFromQuery]
    public string? Username3 { get; set; }
    [SupplyParameterFromQuery]
    public string? Color3 { get; set; }    
    [SupplyParameterFromQuery]
    public bool Active3 { get; set; }
    // Player 4
    [SupplyParameterFromQuery]
    public string? Username4 { get; set; }
    [SupplyParameterFromQuery]
    public string? Color4 { get; set; }    
    [SupplyParameterFromQuery]
    public bool Active4 { get; set; }
    /*
     *
     * 
     *
     */
    public AFigure CurrentBuilding { get; set; } = new City();
    public int CurrentColorId { get; set; } = 0;
    public List<string> ColorRotator { get; set; } = new List<string>();
    public List<Player> ActivePlayers { get; set; } = new List<Player>();
    public List<int[]> FirstPicsList { get; set; } = new List<int[]>();
    <!--public List<string> Phases { get; set; } = new List<string>() { "start", "ertrag", "Aktion" }; -->
    public int CurrentPhaseId { get; set; } = 0;
    public string DiceRoll { get; set; } = "?";
    public bool HasRolled { get; set; } = false;
    public string ButtonText { get; set; } = "Nächster Spieler";
    public List<string> GridPlacedList { get; set; } = Enumerable
        .Range(1, 35)
        .Select(i => $"top_grid_{i}")
        .ToList();
    public List<string> GridPlacedListStreet { get; set; } = Enumerable
        .Range(1, 40)
        .Select(i => $"top_grid_line_{i}")
        .ToList();
    public bool On { get; set; } = false;
    protected override async Task OnInitializedAsync() {
        TileRandomizer.ShuffleTiles();
        TileRandomizer.AddRandId();
        InitPlayers();
    }

    public void InitPlayers()
    {
        if (Active1)
        {
            Player player = new Player(Username1, Color1);
            
            ActivePlayers.Add(player);
            ColorRotator.Add("#"+player.Color);
            FirstPicsList.Add([2,2]);
        }
        if (Active2)
        {
            Player player = new Player(Username2, Color2);
            
            ActivePlayers.Add(player);
            ColorRotator.Add("#"+player.Color);
            FirstPicsList.Add([2,2]);
        }
        if (Active3)
        {
            Player player = new Player(Username3, Color3);
            
            ActivePlayers.Add(player);
            ColorRotator.Add("#"+player.Color);
            FirstPicsList.Add([2,2]);
        }
        if (Active4)
        {
            Player player = new Player(Username4, Color4);
            
            ActivePlayers.Add(player);
            ColorRotator.Add("#"+player.Color);
            FirstPicsList.Add([2,2]);
        }
    }

    public void ChangeBorderColor() {
        if (CurrentPhaseId == 0) {
            if (FirstPicsList[CurrentColorId][0] == 0 && FirstPicsList[CurrentColorId][1] == 0) {
                if (CurrentColorId < ActivePlayers.Count - 1) {
                    CurrentColorId++;
                }
                else {
                    CurrentColorId = 0;
                    HasRolled = false;
                    DiceRoll = "?";
                    CurrentPhaseId = 1;
                }
            }
            else {
                if (FirstPicsList[CurrentColorId][0] == 0) {
                    Js.InvokeVoidAsync("alert", $"Du musst noch {FirstPicsList[CurrentColorId][1]} Straßen bauen");
                }
                else {
                    if (FirstPicsList[CurrentColorId][1] == 0) {
                        Js.InvokeVoidAsync("alert", $"Du musst noch {FirstPicsList[CurrentColorId][0]} Siedlungen bauen");
                    }
                    else {
                        Js.InvokeVoidAsync("alert", $"Du musst noch {FirstPicsList[CurrentColorId][0]} Siedlungen und {FirstPicsList[CurrentColorId][1]} Straßen bauen");
                    }
                }
            }
        }
        else {
            if (CurrentPhaseId == 2) {
                CurrentColorId = 0;
                CurrentPhaseId = 1;
                DiceRoll = "?";
                HasRolled = false;
            }
            else {
//                CurrentColorId = 0;
                HasRolled = false;
                DiceRoll = "?";
            }
        }
    }
    

public void Dice() {
        if (!HasRolled && CurrentPhaseId != 0) {
            Random rand = new Random();
            int randomNum = rand.Next(1, 13);
            DiceRoll = randomNum.ToString();
            HasRolled = true;
        }
    }
// einamal hier kopieren
    public string[] RessourceCardsJsConvert(List<ACards> resourceCards)
    {
        var stringCards = resourceCards.Select(card =>
        {
            var type = "";
            switch (card.Id)
            {
                case ECards.Clay:
                    type = "Clay";
                    break;
                    
                case ECards.Wood:
                    type = "Wood";
                    break;
                    
                case ECards.Sheep:
                    type = "Sheep";
                    break;
                    
                case ECards.Wheat:
                    type = "Wheat";
                    break;
                    
                case ECards.Ore:
                    type = "Stone";
                    break;
                    
                default:
                    type = "";
                    break;
            }
            return type;
        });
        return stringCards.ToArray();
    }
    
    <!-- In Asyn tasks und so ty shi ty shi mit js und so -->
    public async Task Change(string classs){
        await Js.InvokeVoidAsync("Change.changeElement", classs, ColorRotator[CurrentColorId],FirstPicsList[CurrentColorId] ,RessourceCardsJsConvert(ActivePlayers[CurrentColorId].RessourceCards));

    }

    public void Build(AFigure building, string id) {
            Change(id);
            CurrentBuilding = building;

    }

    public async Task Place(string location) {
        if (GridPlacedList.Contains(location))
        {
            GridPlacedList.Remove(location);
            // muss man noch anpassen
            bool removedWood = false;
            bool removedClay = false;
            if (FirstPicsList[CurrentColorId][0] == 0) {
                for (var x = 0; x < ActivePlayers[CurrentColorId].RessourceCards.Count; x++) {
                    var Card = ActivePlayers[CurrentColorId].RessourceCards[x];
                    if (Card.Id == ECards.Wheat && removedWood == false) {
                        ActivePlayers[CurrentColorId].RessourceCards.Remove(Card);
                        removedWood = true;
                    }

                    if (Card.Id == ECards.Clay && removedClay == false) {
                        ActivePlayers[CurrentColorId].RessourceCards.Remove(Card);
                        removedClay = true;
                    }
                }
            }
            
            await Js.InvokeVoidAsync("Place.placeBuilding", location, CurrentBuilding, ColorRotator[CurrentColorId], FirstPicsList[CurrentColorId][0], RessourceCardsJsConvert(ActivePlayers[CurrentColorId].RessourceCards));
            if (FirstPicsList[CurrentColorId][0] > 0) {
                FirstPicsList[CurrentColorId][0] -= 1;
            }
            Build(CurrentBuilding, ".intersec");


        }
        

    }

    public async Task PlaceStreet(string location) {
        if (GridPlacedListStreet.Contains(location)) {
            GridPlacedListStreet.Remove(location);
            bool removedWood = false;
            bool removedClay = false;
            if (FirstPicsList[CurrentColorId][1] == 0) {
                for (var x = 0; x < ActivePlayers[CurrentColorId].RessourceCards.Count; x++) {
                    var Card = ActivePlayers[CurrentColorId].RessourceCards[x];
                    if (Card.Id == ECards.Wheat && removedWood == false) {
                        ActivePlayers[CurrentColorId].RessourceCards.Remove(Card);
                        removedWood = true;
                    }

                    if (Card.Id == ECards.Clay && removedClay == false) {
                        ActivePlayers[CurrentColorId].RessourceCards.Remove(Card);
                        removedClay = true;
                    }
                }
            }

            await Js.InvokeVoidAsync("Place.placeStreet", location, ColorRotator[CurrentColorId], FirstPicsList[CurrentColorId][1], RessourceCardsJsConvert(ActivePlayers[CurrentColorId].RessourceCards));
            if (FirstPicsList[CurrentColorId][1] > 0) {
                FirstPicsList[CurrentColorId][1] -= 1;
            }
            Build(CurrentBuilding, ".bord");

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("Butn.butnn");
        }
    }
    
    public async Task Ertragerwirtschafter() {
        DiceRoll = "4";
        if (DiceRoll != "?") {
            var resources = await Js.InvokeAsync<Dictionary<string, List<object>>>("Ertrag.erwirtschaftung", Int32.Parse(DiceRoll));
            
            foreach (var color in resources["Sheep"])
            {
                Console.WriteLine(color);
                ActivePlayers.Where(p => p.Color == color).ToArray()[0].RessourceCards.Add(new ACards(ECards.Sheep,true,false,false));
            }
            foreach (var color in resources["Clay"]) {
                Console.WriteLine(color);
                ActivePlayers.Where(p => p.Color == color).ToArray()[0].RessourceCards.Add(new ACards(ECards.Clay,true,false,false));            
            }
            foreach (var color in resources["Stone"]) {
                Console.WriteLine(color);
                ActivePlayers.Where(p => p.Color == color).ToArray()[0].RessourceCards.Add(new ACards(ECards.Ore,true,false,false));
            }
            foreach (var color in resources["Wheat"]) {
                Console.WriteLine(color);
                ActivePlayers.Where(p => p.Color == color).ToArray()[0].RessourceCards.Add(new ACards(ECards.Wheat,true,false,false));
            }
            foreach (var color in resources["Wood"]) {
                Console.WriteLine(color);
                ActivePlayers.Where(p => p.Color == color).ToArray()[0].RessourceCards.Add(new ACards(ECards.Wood,true,false,false));
            }

        }

        Console.WriteLine(CurrentColorId);
        Console.WriteLine(CurrentPhaseId);
        Console.WriteLine("--------------------");
    }
    

}